enum DateType {
  All
  Year
  Month
  Day
  Hour
}

enum LockTypes {
  USDV
  VADER
}

enum ProposalState {
  Pending
  Active
  Canceled
  Defeated
  Succeeded
  Queued
  Expired
  Executed
}

enum BondParameter {
  VESTING,
  PAYOUT,
  DEBT
}

type Global @entity {
  id: ID!
  name: String!
  value: String!
  type: DateType
  timestamp: Int
}

type Allowance @entity {
  id: ID!
  token: Token!
  owner: Account!
  spender: Account!
  amount: BigInt!
}

type Balance @entity {
  id: ID!
  account: Account!
  token: Token!
  balance: BigInt!
}

type Account @entity {
  id: ID!
  index: Int!
  address: Bytes!
  updatedAt: Int
  isUntaxed: Boolean!
  isBondContract: Boolean!
  token: [Balance]! @derivedFrom(field: "account")
  nft: [NFTItem]! @derivedFrom(field: "owner")
  allowance: [Allowance]! @derivedFrom(field: "owner")
  nftAllowance: [NFTAllowance]! @derivedFrom(field: "owner")
  vest: [Vest]! @derivedFrom(field: "account")
  lock: [Lock]! @derivedFrom(field: "user")
  bondInfo: [BondInfo]! @derivedFrom(field: "bond")
  bondDepositorInfo: [BondInfo]! @derivedFrom(field: "depositor")
  bondTerm: [Term]! @derivedFrom(field: "bond")
  bondAdjust: [Adjust]! @derivedFrom(field: "bond")
  burnSenderEvent: [BurnEvent]! @derivedFrom(field: "sender")
  burnToEvent: [BurnEvent]! @derivedFrom(field: "to")
  mintSenderEvent: [MintEvent]! @derivedFrom(field: "sender")
  mintToEvent: [MintEvent]! @derivedFrom(field: "to")
  proposal: [Proposal]! @derivedFrom(field: "proposer")
  receipt: [Receipt]! @derivedFrom(field: "voter")
  bondCreatedEvent: [BondCreatedEvent]! @derivedFrom(field: "bond")
  bondRedeemedEvent: [BondRedeemedEvent]! @derivedFrom(field: "bond")
  bondPriceChangedEvent: [BondPriceChangedEvent]! @derivedFrom(field: "bond")
  bondControlVariableAdjustmentEvent: [ControlVariableAdjustmentEvent]! @derivedFrom(field: "bond")
  bondSetBondContractEvent: [SetBondContractEvent]! @derivedFrom(field: "bond")
  bondSetMaxPayoutEvent: [SetMaxPayoutEvent]! @derivedFrom(field: "bond")
  bondResetPayoutEvent: [ResetPayoutEvent]! @derivedFrom(field: "bond")
  bondSetBondTermsEvent: [SetBondTermsEvent]! @derivedFrom(field: "bond")
  bondSetAdjustmentEvent: [SetAdjustmentEvent]! @derivedFrom(field: "bond")
  bondTreasuryChangedEvent: [TreasuryChangedEvent]! @derivedFrom(field: "bond")
  bondRedeemedRecipientEvent: [BondRedeemedEvent]! @derivedFrom(field: "recipient")
  conversionEvent: [ConversionEvent]! @derivedFrom(field: "user")
  councilChangedOldEvent: [CouncilChangedEvent]! @derivedFrom(field: "oldCouncil")
  councilChangedNewEvent: [CouncilChangedEvent]! @derivedFrom(field: "newCouncil")
  feeReceiverChangedOldEvent: [FeeReceiverChangedEvent]! @derivedFrom(field: "oldFeeReceiver")
  feeReceiverChangedNewEvent: [FeeReceiverChangedEvent]! @derivedFrom(field: "newFeeReceiver")
  grantClaimedEvent: [GrantClaimedEvent]! @derivedFrom(field: "beneficiary")
  grantDistributedEvent: [GrantDistributedEvent]! @derivedFrom(field: "recipient")
  lossCoveredEvent: [LossCoveredEvent]! @derivedFrom(field: "recipient")
  lockCreatedEvent: [LockCreatedEvent]! @derivedFrom(field: "user")
  lockClaimedEvent: [LockClaimedEvent]! @derivedFrom(field: "user")
  newAdminEvent: [NewAdminEvent]! @derivedFrom(field: "newAdmin")
  newPendingAdminEvent: [NewPendingAdminEvent]! @derivedFrom(field: "newPendingAdmin")
  positionOpenedFromEvent: [PositionOpenedEvent]! @derivedFrom(field: "from")
  positionOpenedToEvent: [PositionOpenedEvent]! @derivedFrom(field: "to")
  positionClosedEvent: [PositionClosedEvent]! @derivedFrom(field: "sender")
  proposalCreatedEvent: [ProposalCreatedEvent]! @derivedFrom(field: "proposer")
  treasurySetBondContractEvent: [SetBondContractEvent]! @derivedFrom(field: "treasury")
  treasurySetMaxPayoutEvent: [SetMaxPayoutEvent]! @derivedFrom(field: "treasury")
  treasuryResetPayoutEvent: [ResetPayoutEvent]! @derivedFrom(field: "treasury")
  treasuryChangedEvent: [TreasuryChangedEvent]! @derivedFrom(field: "treasury")
  treasuryWithdrawEvent: [WithdrawEvent]! @derivedFrom(field: "treasury")
  treasuryWithdrawDestinationEvent: [WithdrawEvent]! @derivedFrom(field: "destination")
  approveOwnerEvent: [ApprovalEvent]! @derivedFrom(field: "owner")
  approveSpenderEvent: [ApprovalEvent]! @derivedFrom(field: "spender")
  receiveEvent: [TransferEvent]! @derivedFrom(field: "to")
  sendEvent: [TransferEvent]! @derivedFrom(field: "from")
  swapSenderEvent: [SwapEvent]! @derivedFrom(field: "sender")
  swapToEvent: [SwapEvent]! @derivedFrom(field: "to")
  vestedEvent: [VestedEvent]! @derivedFrom(field: "from")
  validateEvent: [ValidateEvent]! @derivedFrom(field: "account")
  inValidateEvent: [InValidateEvent]! @derivedFrom(field: "account")
  setOracleEvent: [SetOracleEvent]! @derivedFrom(field: "oracle")
  whitelistPartnerEvent: [WhitelistPartnerEvent]! @derivedFrom(field: "partner")
}

# ======================== Token ========================
type Token @entity {
  id: ID!
  address: Bytes!
  totalSupply: BigInt!
  isSupported: Boolean!
  isSynth: Boolean!
  synth: Bytes
  holder: [Balance]! @derivedFrom(field: "token")
  nftHolder: [NFTItem]! @derivedFrom(field: "token")
  allowance: [Allowance]! @derivedFrom(field: "token")
  nftAllowance: [NFTAllowance]! @derivedFrom(field: "token")
  foreignAssetPosition: [Position]! @derivedFrom(field: "foreignAsset")
  pairInfo: [PairInfo]! @derivedFrom(field: "foreignAsset")
  swapEvent: [SwapEvent]! @derivedFrom(field: "foreignAsset")
  syncEvent: [SyncEvent]! @derivedFrom(field: "foreignAsset")
  withdrawEvent: [WithdrawEvent]! @derivedFrom(field: "token")
  transferEvent: [TransferEvent]! @derivedFrom(field: "token")
  approvalEvent: [ApprovalEvent]! @derivedFrom(field: "token")
}

type ApprovalEvent @entity {
  id: ID!
  token: Token!
  owner: Account!
  spender: Account!
  amount: BigInt!
  timestamp: Int
}

type TransferEvent @entity {
  id: ID!
  token: Token!
  from: Account!
  to: Account!
  value: BigInt!
  timestamp: Int
}

# ======================== Vader ========================
type EmissionEvent @entity {
  id: ID!
  amount: BigInt!
  lastEmission: BigInt!
  timestamp: Int
}

type EmissionChangedEvent @entity {
  id: ID!
  previous: BigInt!
  next: BigInt!
  timestamp: Int
}

type GrantClaimedEvent @entity {
  id: ID!
  beneficiary: Account!
  amount: BigInt!
  timestamp: Int
}

type MaxSupplyChangedEvent @entity {
  id: ID!
  previous: BigInt!
  next: BigInt!
  timestamp: Int
}

type ProtocolInitializedEvent @entity {
  id: ID!
  converter: Bytes!
  vest: Token!
  usdv: Token!
  dao: Bytes!
  timestamp: Int
}

# ======================== USDV =========================
type LockCreatedEvent @entity {
  id: ID!
  user: Account!
  lockType: LockTypes!
  lockAmount: BigInt!
  lockRelease: BigInt!
  timestamp: Int
}

type LockClaimedEvent @entity {
  id: ID!
  user: Account!
  lockType: LockTypes!
  lockAmount: BigInt!
  lockRelease: BigInt!
  timestamp: Int
}

type Lock @entity {
  id: ID!
  user: Account!
  token: LockTypes!
  amount: BigInt!
  release: BigInt!
  isRemoved: Boolean!
}

# ====================== Converter ======================
type ConversionEvent @entity {
  id: ID!
  user: Account!
  vetherAmount: BigInt!
  vaderAmount: BigInt!
  timestamp: Int
}

# ==================== VaderReserve ======================
type GrantDistributedEvent @entity {
  id: ID!
  recipient: Account!
  amount: BigInt!
  timestamp: Int
}

type LossCoveredEvent @entity {
  id: ID!
  recipient: Account!
  amount: BigInt!
  timestamp: Int
}

# ===================== VaderPoolV2 ========================
type NFTApproval @entity {
  id: ID!
  token: Token!
  owner: Account!
  operator: Account!
  approved: Boolean!
}

type NFTAllowance @entity {
  id: ID!
  token: Token!
  owner: Account!
  spender: Account!
  tokenId: BigInt!
}

type NFTItem @entity {
  id: ID!
  owner: Account!
  token: Token!
  tokenId: BigInt!
  position: [Position]! @derivedFrom(field: "nftItem")
}

type Position @entity {
  id: ID!
  foreignAsset: Token!
  creation: BigInt!
  liquidity: BigInt!
  originalNative: BigInt!
  originalForeign: BigInt!
  nftItem: NFTItem!
  isDeleted: Boolean!
}

type PairInfo @entity {
  id: ID!
  foreignAsset: Token!
  totalSupply: BigInt!
  reserveNative: BigInt!
  reserveForeign: BigInt!
  blockTimestampLast: BigInt!
  nativeLast: BigInt!
  foreignLast: BigInt!
}

type BurnEvent @entity {
  id: ID!
  sender: Account!
  amount0: BigInt!
  amount1: BigInt!
  to: Account!
  timestamp: Int
}

type MintEvent @entity {
  id: ID!
  sender: Account!
  to: Account!
  amount0: BigInt!
  amount1: BigInt!
  timestamp: Int
}

type PositionOpenedEvent @entity {
  id: ID!
  from: Account!
  to: Account!
  index: BigInt!
  liquidity: BigInt!
  timestamp: Int
}

type PositionClosedEvent @entity {
  id: ID!
  sender: Account!
  index: BigInt!
  liquidity: BigInt!
  loss: BigInt!
  timestamp: Int
}

type QueueActiveEvent @entity {
  id: ID!
  activated: Boolean!
  timestamp: Int
}

type SwapEvent @entity {
  id: ID!
  foreignAsset: Token!
  sender: Account!
  amount0In: BigInt!
  amount1In: BigInt!
  amount0Out: BigInt!
  amount1Out: BigInt!
  to: Account!
  timestamp: Int
}

type SyncEvent @entity {
  id: ID!
  foreignAsset: Token!
  reserve0: BigInt!
  reserve1: BigInt!
  timestamp: Int
}

# ===================== Treasury =========================
type SetBondContractEvent @entity {
  id: ID!
  treasury: Account!
  bond: Account!
  approved: Boolean!
  timestamp: Int
}

type WithdrawEvent @entity {
  id: ID!
  treasury: Account!
  token: Token!
  destination: Account!
  amount: BigInt!
  timestamp: Int
}

type SetMaxPayoutEvent @entity {
  id: ID!
  treasury: Account!
  bond: Account!
  max: BigInt!
  timestamp: Int
}

type ResetPayoutEvent @entity {
  id: ID!
  treasury: Account!
  bond: Account!
  sold: BigInt!
  timestamp: Int
}

# ===================== VaderBond ========================
type Term @entity {
  id: ID!
  bond: Account!
  controlVariable: BigInt!
  vestingTerm: BigInt!
  minPrice: BigInt!
  maxPayout: BigInt!
  maxDebt: BigInt!
}

type Adjust @entity {
  id: ID!
  bond: Account!
  add: Boolean!
  rate: BigInt!
  target: BigInt!
  buffer: BigInt!
  lastBlock: BigInt!
}

type BondInfo @entity {
  id: ID!
  bond: Account!
  depositor: Account!
  payout: BigInt!
  vesting: BigInt!
  lastBlock: BigInt!
}

type BondCreatedEvent @entity {
  id: ID!
  bond: Account!
  deposit: BigInt!
  payout: BigInt!
  expires: BigInt!
  timestamp: Int
}

type BondRedeemedEvent @entity {
  id: ID!
  bond: Account!
  recipient: Account!
  payout: BigInt!
  remaining: BigInt!
  timestamp: Int
}

type BondPriceChangedEvent @entity {
  id: ID!
  bond: Account!
  internalPrice: BigInt!
  debtRatio: BigInt!
  timestamp: Int
}

type ControlVariableAdjustmentEvent @entity {
  id: ID!
  bond: Account!
  initialBCV: BigInt!
  newBCV: BigInt!
  adjustment: BigInt!
  addition: Boolean!
  timestamp: Int
}

type SetBondTermsEvent @entity {
  id: ID!
  bond: Account!
  param: BondParameter!
  input: BigInt!
  timestamp: Int
}

type SetAdjustmentEvent @entity {
  id: ID!
  bond: Account!
  add: Boolean!
  rate: BigInt!
  target: BigInt!
  buffer: BigInt!
  timestamp: Int
}

type TreasuryChangedEvent @entity {
  id: ID!
  bond: Account!
  treasury: Account!
  timestamp: Int
}

# =================== LinearVesting ======================
type Vest @entity {
  id: ID!
  account: Account!
  amount: BigInt!
  lastClaim: BigInt!
  start: BigInt!
  end: BigInt!
}

type VestedEvent @entity {
  id: ID!
  from: Account!
  amount: BigInt!
  timestamp: Int
}

type VestingCreatedEvent @entity {
  id: ID!
  user: Account!
  amount: BigInt!
  timestamp: Int
}

type VestingInitializedEvent @entity {
  id: ID!
  duration: BigInt!
  timestamp: Int
}

# ================== UnlockValidator =====================
type InValidateEvent @entity {
  id: ID!
  account: Account!
  timestamp: Int
}

type ValidateEvent @entity {
  id: ID!
  account: Account!
  timestamp: Int
}

# ==================== UniswapTwap =======================
type SetOracleEvent @entity {
  id: ID!
  oracle: Account!
  timestamp: Int
}

# ============== VaderMinterUpgradeable ==================
type PublicMintCapChangedEvent @entity {
  id: ID!
  previousPublicMintCap: BigInt!
  publicMintCap: BigInt!
  timestamp: Int
}

type PublicMintFeeChangedEvent @entity {
  id: ID!
  previousPublicMintFee: BigInt!
  publicMintFee: BigInt!
  timestamp: Int
}

type PartnerMintCapChangedEvent @entity {
  id: ID!
  previousPartnerMintCap: BigInt!
  partnerMintCap: BigInt!
  timestamp: Int
}

type PartnerMintFeeChangedEvent @entity {
  id: ID!
  previousPartnercMintFee: BigInt!
  partnerMintFee: BigInt!
  timestamp: Int
}

type DailyLimitsChangedEvent @entity {
  id: ID!
  previousFee: BigInt!
  previousMintLimit: BigInt!
  previousBurnLimit: BigInt!
  nextFee: BigInt!
  nextMintLimit: BigInt!
  nextBurnLimit: BigInt!
  timestamp: Int
}

type WhitelistPartnerEvent @entity {
  id: ID!
  partner: Account!
  mintLimit: BigInt!
  burnLimit: BigInt!
  fee: BigInt!
  timestamp: Int
}

# =================== GovernorAlpha ======================
type Proposal @entity {
  id: ID!
  canceled: Boolean!
  executed: Boolean!
  proposer: Account!
  eta: BigInt!
  targets: [Bytes!]!
  values: [BigInt!]!
  signatures: [String]!
  calldatas: [Bytes!]!
  startBlock: BigInt!
  endBlock: BigInt!
  forVotes: BigInt!
  againstVotes: BigInt!
  vetoStatus: VetoStatus
  receipt: [Receipt]! @derivedFrom(field: "proposal")
}

type VetoStatus @entity {
  id: ID!
  hasBeenVetoed: Boolean!
  support: Boolean!
}

type Receipt @entity {
  id: ID!
  proposal: Proposal!
  voter: Account!
  hasVoted: Boolean!
  support: Boolean!
  votes: BigInt!
}

type CouncilChangedEvent @entity {
  id: ID!
  oldCouncil: Account!
  newCouncil: Account!
  timestamp: Int
}

type FeeReceiverChangedEvent @entity {
  id: ID!
  oldFeeReceiver: Account!
  newFeeReceiver: Account!
  timestamp: Int
}

type FeeAmountChangedEvent @entity {
  id: ID!
  oldFeeAmount: BigInt!
  newFeeAmount: BigInt!
  timestamp: Int
}

type ProposalCreatedEvent @entity {
  id: ID!
  index: BigInt!
  proposer: Account!
  targets: [Bytes!]!
  values: [BigInt!]!
  signatures: [String]!
  calldatas: [Bytes!]!
  startBlock: BigInt!
  endBlock: BigInt!
  description: String!
  timestamp: Int
}

type ProposalCanceledEvent @entity {
  id: ID!
  proposalId: BigInt!
  timestamp: Int
}

type ProposalQueuedEvent @entity {
  id: ID!
  proposalId: BigInt!
  eta: BigInt!
  timestamp: Int
}

type ProposalExecutedEvent @entity {
  id: ID!
  proposalId: BigInt!
  timestamp: Int
}

type ProposalVetoedEvent @entity {
  id: ID!
  proposalId: BigInt!
  support: Boolean!
  timestamp: Int
}

type VoteCastEvent @entity {
  id: ID!
  voter: Account!
  proposalId: BigInt!
  support: Boolean!
  votes: BigInt!
  timestamp: Int
}
                        
# ===================== Timelock =========================
type QueuedTransaction @entity {
  id: ID!
  status: Boolean!
  cancelTransactionEvent: [CancelTransactionEvent]! @derivedFrom(field: "txHash")
  executeTransactionEvent: [ExecuteTransactionEvent]! @derivedFrom(field: "txHash")
  queueTransactionEvent: [QueueTransactionEvent]! @derivedFrom(field: "txHash")
}

type NewAdminEvent @entity {
  id: ID!
  newAdmin: Account!
  timestamp: Int
}

type NewPendingAdminEvent @entity {
  id: ID!
  newPendingAdmin: Account!
  timestamp: Int
}

type NewDelayEvent @entity {
  id: ID!
  newDelay: BigInt!
  timestamp: Int
}

type CancelTransactionEvent @entity {
  id: ID!
  txHash: QueuedTransaction!
  target: Bytes!
  value: BigInt!
  signature: String!
  data: Bytes!
  eta: BigInt!
  timestamp: Int
}

type ExecuteTransactionEvent @entity {
  id: ID!
  txHash: QueuedTransaction!
  target: Bytes!
  value: BigInt!
  signature: String!
  data: Bytes!
  eta: BigInt!
  timestamp: Int
}

type QueueTransactionEvent @entity {
  id: ID!
  txHash: QueuedTransaction!
  target: Bytes!
  value: BigInt!
  signature: String!
  data: Bytes!
  eta: BigInt!
  timestamp: Int
}
