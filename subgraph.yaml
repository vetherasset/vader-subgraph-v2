specVersion: 0.0.2
schema:
  file: ./schema.graphql
dataSources:
  # This approach uses a particular event emitted once very early to trigger token registry
  # initialization. It is not so important what the event is but rather that it was emitted before
  # any other event of an ERC20 token. We even don't know what contract it is. Besides that, the ABI
  # file for that contract was inferred since no contract information or source code is available
  # out there.

  # ======================== Vader ========================
  - kind: ethereum/contract
    name: Vader
    network: kovan
    source:
      address: "0x1fd03e4eA209497910fACE52e5ca39124ef2E8BE"
      abi: Vader
      startBlock: 28597367
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
        - Token
        - Account
        - Allowance
        - Transaction
        - ApprovalEvent
      abis:
        - name: Vader
          file: ./abis/Vader.json
      eventHandlers:
        - event: Approval(indexed address,indexed address,uint256)
          handler: handleApprovalEvent
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransferEvent
        - event: Emission(uint256,uint256)
          handler: handleEmissionEvent
        - event: EmissionChanged(uint256,uint256)
          handler: handleEmissionChangedEvent
        - event: GrantClaimed(indexed address,uint256)
          handler: handleGrantClaimedEvent
        - event: MaxSupplyChanged(uint256,uint256)
          handler: handleMaxSupplyChangedEvent
        - event: ProtocolInitialized(address,address,address,address)
          handler: handleProtocolInitializedEvent
      file: ./src/mappings/vader.ts

  # ======================== USDV =========================
  - kind: ethereum/contract
    name: USDV
    network: kovan
    source:
      address: "0x0de905dfb036521f5A45Da90B2D9e8a74a9CE42E"
      abi: USDV
      startBlock: 29237977
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
        - Token
        - Account
        - Allowance
        - Transaction
        - ApprovalEvent
      abis:
        - name: USDV
          file: ./abis/USDV.json
      eventHandlers:
        - event: Approval(indexed address,indexed address,uint256)
          handler: handleApprovalEvent
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransferEvent
        - event: LockCreated(address,uint8,uint256,uint256)
          handler: handleLockCreatedEvent
        - event: LockClaimed(address,uint8,uint256,uint256)
          handler: handleLockClaimedEvent
      callHandlers:
        - function: claim(uint256)
          handler: handleClaim
        - function: claimAll()
          handler: handleClaimAll
        - function: setGuardian(address)
          handler: handleSetGuardian
        - function: setMinter(address)
          handler: handleSetMinter
        - function: setLock(bool)
          handler: handleSetLock
        - function: setValidator(address)
          handler: handleSetValidator
      file: ./src/mappings/usdv.ts

  # ======================= BOND LP ========================
  - kind: ethereum/contract
    name: BONDLP
    network: kovan
    source:
      address: "0x38F19a5452B03262203cAe9532Fbfd211fa32FF1"
      abi: ERC20
      startBlock: 28674741
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
        - Token
        - Account
        - Allowance
        - Transaction
        - ApprovalEvent
      abis:
        - name: ERC20
          file: ./abis/ERC20.json
      eventHandlers:
        - event: Approval(indexed address,indexed address,uint256)
          handler: handleApprovalEvent
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransferEvent
      file: ./src/mappings/erc20.ts

  # ====================== Converter ======================
  - kind: ethereum/contract
    name: Converter
    network: kovan
    source:
      address: "0x49CD0e2C632FBb9765520798a93272BeB44278bC"
      abi: Converter
      startBlock: 28115482
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
        - Token
        - Account
        - Allowance
        - Transaction
        - ApprovalEvent
      abis:
        - name: Converter
          file: ./abis/Converter.json
      eventHandlers:
        - event: Conversion(indexed address,uint256,uint256)
          handler: handleConversionEvent
      file: ./src/mappings/converter.ts

  # ==================== VaderReserve =====================
  - kind: ethereum/contract
    name: VaderReserve
    network: kovan
    source:
      address: "0xd3d6e14150530105ef7873D860BEc97F75a4F369"
      abi: VaderReserve
      startBlock: 28115698
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
        - Token
        - Account
        - Allowance
        - Transaction
        - ApprovalEvent
      abis:
        - name: VaderReserve
          file: ./abis/VaderReserve.json
      eventHandlers:
        - event: GrantDistributed(address,uint256)
          handler: handleGrantDistributedEvent
        - event: LossCovered(address,uint256)
          handler: handleLossCoveredEvent
      file: ./src/mappings/vaderReserve.ts

  # ===================== VaderPoolV2 ======================
  - kind: ethereum/contract
    name: VaderPoolV2
    network: kovan
    source:
      address: "0xf780120f249Cd518309a2315b73288B05Ff6Abc3"
      abi: VaderPoolV2
      startBlock: 28115871
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Pair
        - Token
      abis:
        - name: VaderPoolV2
          file: ./abis/VaderPoolV2.json
      eventHandlers:
        - event: Approval(indexed address,indexed address,indexed uint256)
          handler: handleApprovalEvent
        - event: ApprovalForAll(indexed address,indexed address,bool)
          handler: handleApprovalForAllEvent
        - event: Transfer(indexed address,indexed address,indexed uint256)
          handler: handleTransferEvent
        - event: Burn(indexed address,uint256,uint256,indexed address)
          handler: handleBurnEvent
        - event: Mint(indexed address,indexed address,uint256,uint256)
          handler: handleMintEvent
        - event: PositionOpened(indexed address,indexed address,uint256,uint256)
          handler: handlePositionOpenedEvent
        - event: PositionClosed(indexed address,uint256,uint256,uint256)
          handler: handlePositionClosedEvent
        - event: QueueActive(bool)
          handler: handleQueueActiveEvent
        - event: Swap(address,indexed address,uint256,uint256,uint256,uint256,indexed address)
          handler: handleSwapEvent
        - event: Sync(address,uint256,uint256)
          handler: handleSyncEvent
      callHandlers:
        - function: burn(uint256,address)
          handler: handleBurn
        - function: mint(address,uint256,uint256,address,address)
          handler: handleMint
        - function: setTokenSupport(address,bool)
          handler: handleSetTokenSupport
      file: ./src/mappings/vaderPoolV2.ts

  # ====================== SynthFactory =======================
  - kind: ethereum/contract
    name: SynthFactory
    network: kovan
    source:
      address: "0xfdD944fa68C5a0D08D814E58a72a685BcA59105F"
      abi: SynthFactory
      startBlock: 28116126
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - token
      abis:
        - name: SynthFactory
          file: ./abis/SynthFactory.json
      callHandlers:
        - function: createSynth(address)
          handler: handleCreateSynth
      file: ./src/mappings/synthFactory.ts

  # ======================== XVader ==========================
  - kind: ethereum/contract
    name: XVader
    network: kovan
    source:
      address: "0x0AA1056Ee563C14484fCC530625cA74575C97512"
      abi: XVader
      startBlock: 28597635
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - XVaderPrice
      abis:
        - name: XVader
          file: ./abis/XVader.json
      eventHandlers:
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransferEvent
      callHandlers:
        - function: enter(uint256)
          handler: handleEnter
        - function: leave(uint256)
          handler: handleLeave
      file: ./src/mappings/XVader.ts

  # ======================== Treasury ========================
  - kind: ethereum/contract
    name: Treasury
    network: kovan
    source:
      address: "0x15d89713eA5C46dE381C51A34fE4C743677576B4"
      abi: Treasury
      startBlock: 28674805
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - token
      abis:
        - name: Treasury
          file: ./abis/Treasury.json
      eventHandlers:
        - event: SetBondContract(address,bool)
          handler: handleSetBondContractEvent
        - event: Withdraw(indexed address,indexed address,uint256)
          handler: handleWithdrawEvent
        - event: SetMaxPayout(indexed address,uint256)
          handler: handleSetMaxPayoutEvent
        - event: ResetPayout(indexed address,uint256)
          handler: handleResetPayoutEvent
      callHandlers:
        - function: deposit(address,uint256,uint256)
          handler: handleDeposit
      file: ./src/mappings/treasury.ts

  - kind: ethereum/contract
    name: Treasury2
    network: kovan
    source:
      address: "0x666266f24E17d9ab7bCb25715C75146143E16c39"
      abi: Treasury
      startBlock: 28776877
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - token
      abis:
        - name: Treasury
          file: ./abis/Treasury.json
      eventHandlers:
        - event: SetBondContract(address,bool)
          handler: handleSetBondContractEvent
        - event: Withdraw(indexed address,indexed address,uint256)
          handler: handleWithdrawEvent
        - event: SetMaxPayout(indexed address,uint256)
          handler: handleSetMaxPayoutEvent
        - event: ResetPayout(indexed address,uint256)
          handler: handleResetPayoutEvent
      callHandlers:
        - function: deposit(address,uint256,uint256)
          handler: handleDeposit
      file: ./src/mappings/treasury.ts

  # ======================= VaderBond ========================
  - kind: ethereum/contract
    name: VaderBond1
    network: kovan
    source:
      address: "0x66BcC1c537509bA441ccc9DF39E18CC142C59775"
      abi: VaderBond
      startBlock: 28674821
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - token
      abis:
        - name: VaderBond
          file: ./abis/VaderBond.json
        - name: Treasury
          file: ./abis/Treasury.json
      eventHandlers:
        - event: BondCreated(uint256,uint256,uint256)
          handler: handleBondCreatedEvent
        - event: BondRedeemed(indexed address,uint256,uint256)
          handler: handleBondRedeemedEvent
        - event: BondPriceChanged(uint256,uint256)
          handler: handleBondPriceChangedEvent
        - event: ControlVariableAdjustment(uint256,uint256,uint256,bool)
          handler: handleControlVariableAdjustmentEvent
        - event: SetBondTerms(indexed uint8,uint256)
          handler: handleSetBondTermsEvent
        - event: SetAdjustment(bool,uint256,uint256,uint256)
          handler: handleSetAdjustmentEvent
        - event: TreasuryChanged(address)
          handler: handleTreasuryChangedEvent
      callHandlers:
        - function: initializeBond(uint256,uint256,uint256,uint256,uint256,uint256)
          handler: handleInitializeBond
        - function: deposit(uint256,uint256,address)
          handler: handleDeposit
      file: ./src/mappings/vaderBond.ts

  - kind: ethereum/contract
    name: VaderBond2
    network: kovan
    source:
      address: "0xd932cc11F49df7638999E2a313e5808667363750"
      abi: VaderBond
      startBlock: 28759864
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - token
      abis:
        - name: VaderBond
          file: ./abis/VaderBond.json
        - name: Treasury
          file: ./abis/Treasury.json
      eventHandlers:
        - event: BondCreated(uint256,uint256,uint256)
          handler: handleBondCreatedEvent
        - event: BondRedeemed(indexed address,uint256,uint256)
          handler: handleBondRedeemedEvent
        - event: BondPriceChanged(uint256,uint256)
          handler: handleBondPriceChangedEvent
        - event: ControlVariableAdjustment(uint256,uint256,uint256,bool)
          handler: handleControlVariableAdjustmentEvent
        - event: SetBondTerms(indexed uint8,uint256)
          handler: handleSetBondTermsEvent
        - event: SetAdjustment(bool,uint256,uint256,uint256)
          handler: handleSetAdjustmentEvent
        - event: TreasuryChanged(address)
          handler: handleTreasuryChangedEvent
      callHandlers:
        - function: initializeBond(uint256,uint256,uint256,uint256,uint256,uint256)
          handler: handleInitializeBond
        - function: deposit(uint256,uint256,address)
          handler: handleDeposit
      file: ./src/mappings/vaderBond.ts

  # ==================== LinearVesting ====================
  - kind: ethereum/contract
    name: LinearVesting
    network: kovan
    source:
      address: "0x54f208B5fF23F87c26d139Cbc410ECaA8d28360C"
      abi: LinearVesting
      startBlock: 28115531
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
        - Token
        - Account
        - Allowance
        - Transaction
        - ApprovalEvent
      abis:
        - name: LinearVesting
          file: ./abis/LinearVesting.json
      eventHandlers:
        - event: Vested(indexed address,uint256)
          handler: handleVestedEvent
        - event: VestingCreated(address,uint256)
          handler: handleVestingCreatedEvent
        - event: VestingInitialized(uint256)
          handler: handleVestingInitializedEvent
      file: ./src/mappings/linearVesting.ts

  # =================== UnlockValidator ===================
  - kind: ethereum/contract
    name: UnlockValidator
    network: kovan
    source:
      address: "0xb2a110fE104bbD0Cf63777234080d9B33a60b935"
      abi: UnlockValidator
      startBlock: 29238153
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
      abis:
        - name: UnlockValidator
          file: ./abis/UnlockValidator.json
      eventHandlers:
        - event: InValidate(address)
          handler: handleInValidateEvent
        - event: Validate(address)
          handler: handleValidateEvent
      file: ./src/mappings/unlockValidator.ts

  # ===================== UniswapTwap =====================
  - kind: ethereum/contract
    name: UniswapTwap
    network: kovan
    source:
      address: "0xF0733C42640a93D7216c45fec99B2Ba839Afff94"
      abi: UniswapTwap
      startBlock: 29225690
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
      abis:
        - name: UniswapTwap
          file: ./abis/UniswapTwap.json
      eventHandlers:
        - event: SetOracle(address)
          handler: handleSetOracle
      file: ./src/mappings/uniswapTwap.ts

  # ==================== GovernorAlpha ====================
  - kind: ethereum/contract
    name: GovernorAlpha
    network: kovan
    source:
      address: "0xa8D27FEF019B93Cb99e1a51ef463919ec4BDAb0e"
      abi: GovernorAlpha
      startBlock: 28116483
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
        - Token
        - Account
        - Allowance
        - Transaction
        - ApprovalEvent
      abis:
        - name: GovernorAlpha
          file: ./abis/GovernorAlpha.json
      eventHandlers:
        - event: CouncilChanged(address,address)
          handler: handleCouncilChangedEvent
        - event: FeeReceiverChanged(address,address)
          handler: handleFeeReceiverChangedEvent
        - event: FeeAmountChanged(uint256,uint256)
          handler: handleFeeAmountChangedEvent
        - event: ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)
          handler: handleProposalCreatedEvent
        - event: ProposalCanceled(uint256)
          handler: handleProposalCanceledEvent
        - event: ProposalQueued(uint256,uint256)
          handler: handleProposalQueuedEvent
        - event: ProposalExecuted(uint256)
          handler: handleProposalExecutedEvent
        - event: ProposalVetoed(uint256,bool)
          handler: handleProposalVetoedEvent
        - event: VoteCast(address,uint256,bool,uint256)
          handler: handleVoteCastEvent
      file: ./src/mappings/governorAlpha.ts

    # ====================== Timelock =======================
  - kind: ethereum/contract
    name: Timelock
    network: kovan
    source:
      address: "0x02e3157Df831C3454d008901ddBB108C301E378a"
      abi: Timelock
      startBlock: 28116418
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.4
      language: wasm/assemblyscript
      entities:
        - Global
        - Token
        - Account
        - Allowance
        - Transaction
        - ApprovalEvent
      abis:
        - name: Timelock
          file: ./abis/Timelock.json
      eventHandlers:
        - event: NewAdmin(indexed address)
          handler: handleNewAdminEvent
        - event: NewPendingAdmin(indexed address)
          handler: handleNewPendingAdminEvent
        - event: NewDelay(indexed uint256)
          handler: handleNewDelayEvent
        - event: CancelTransaction(indexed bytes32,indexed address,uint256,string,bytes,uint256)
          handler: handleCancelTransactionEvent
        - event: ExecuteTransaction(indexed bytes32,indexed address,uint256,string,bytes,uint256)
          handler: handleExecuteTransactionEvent
        - event: QueueTransaction(indexed bytes32,indexed address,uint256,string,bytes,uint256)
          handler: handleQueueTransactionEvent
      file: ./src/mappings/timelock.ts
